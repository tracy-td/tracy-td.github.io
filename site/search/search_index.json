{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"DESENVOLVEDORES/Arquitetura/Arquitetura-Tracy-TD/","title":"Arquitetura de Tracy-TD","text":"<p>A arquitetura do Tracy-TD \u00e9 baseada no C4 Model, uma abordagem para descrever a arquitetura de software de forma clara e concisa. Atrav\u00e9s do C4 Model, \u00e9 poss\u00edvel compreender a estrutura, os componentes e as intera\u00e7\u00f5es do Tracy-TD.</p> <p>Para visualizar a arquitetura atual do Tracy-TD, voc\u00ea pode acessar o diagrama C4 Model por meio do seguinte link:</p> <ul> <li>Current C4Model</li> </ul> <p>Nesse diagrama, voc\u00ea encontrar\u00e1 uma representa\u00e7\u00e3o visual dos elementos arquiteturais do Tracy-TD, incluindo suas camadas, componentes, relacionamentos e interfaces. Isso permitir\u00e1 que voc\u00ea tenha uma compreens\u00e3o mais clara da estrutura do sistema e como seus diferentes elementos se relacionam.</p> <p>Explorar a arquitetura do Tracy-TD por meio do C4 Model \u00e9 uma excelente maneira de obter insights sobre o funcionamento interno do sistema e como as diferentes partes se encaixam. Isso pode ser \u00fatil para desenvolvedores, arquitetos de software e qualquer pessoa interessada em entender melhor a arquitetura do Tracy-TD.</p>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/","title":"Gerenciamento de contribui\u00e7\u00f5es","text":"<p>O projeto tem um conselho de gest\u00e3o do que deve ou n\u00e3o ser priorizado. Esse conjunto de desenvolvedores \u00e9 formado por pessoas com experi\u00eancia no c\u00f3digo e no produto. Com o tempo, voc\u00ea tamb\u00e9m poder\u00e1 ajudar ingressando no conselho de administra\u00e7\u00e3o.</p>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#processo-de-desenvolvimento-do-projeto","title":"Processo de desenvolvimento do projeto","text":"<ul> <li> <p>Registro de uma Issue </p> <pre><code>Uma vez registrada, a issue pode receber coment\u00e1rios de outras pessoas para detalhar\ne melhorar a descri\u00e7\u00e3o da nova solicita\u00e7\u00e3o de aprimoramento, novo recurso ou bug a ser\nresolvido.\nQualquer pessoa pode assumir uma issue em aberto e implementar sua solu\u00e7\u00e3o.\n</code></pre> </li> <li> <p>Atribui\u00e7\u00e3o de uma Issue</p> <pre><code> Na p\u00e1gina de issue, voc\u00ea ter\u00e1 a lista completa de issues do projeto e, ao clicar em uma issue,\n voc\u00ea pode atribu\u00ed-la a si mesmo em \"Respons\u00e1veis\". Assim, ela se tornar\u00e1 sua responsabilidade de desenvolvimento.\n Siga as diretrizes sobre como criar uma branch e fazer um pull request.\n</code></pre> </li> <li> <p>Criando branch</p> <pre><code>Para iniciar o desenvolvimento, \u00e9 necess\u00e1rio criar uma branch. Existem, por padr\u00e3o,\ntr\u00eas tipos de branches: hot, feat e bugfix:\n - hot -&gt; hotfix: Prefixo de branch para mudan\u00e7as r\u00e1pidas e pequenas no c\u00f3digo;\n - feat -&gt; feature: Prefixo de branch para novas funcionalidades ou melhorias;\n - bugfix -&gt; Prefixo de branch para corre\u00e7\u00e3o de bugs no c\u00f3digo.\nConhecendo os prefixos para cada tipo de tarefa, preencha o sufixo do nome da branch\ncom \"/#\", seguido pelo n\u00famero da tarefa.\n Exemplo: \"hot/#xxxx\", \"feat/#yyyy\", \"bugfix/#zzzz\".\n</code></pre> </li> <li> <p>Fazendo Pull Request</p> <pre><code>Depois de implementar sua solu\u00e7\u00e3o, voc\u00ea deve criar um Pull Request para que sua contribui\u00e7\u00e3o seja revisada e incorporada ao projeto principal. Siga os passos abaixo:\n\n1. Certifique-se de ter feito o commit de todas as altera\u00e7\u00f5es relevantes na sua branch.\n2. Acesse a p\u00e1gina do reposit\u00f3rio no GitHub.\n3. Clique na aba \"Pull Requests\".\n4. Clique no bot\u00e3o \"New Pull Request\".\n5. Selecione a sua branch como \"base branch\" e a branch principal do projeto como \"compare branch\".\n6. Revise as altera\u00e7\u00f5es propostas e forne\u00e7a uma descri\u00e7\u00e3o clara do que foi feito.\n7. Caso necess\u00e1rio, mencione as tarefas ou problemas relacionados ao Pull Request.\n8. Clique em \"Create Pull Request\" para criar o Pull Request.\n9. Aguarde a revis\u00e3o dos colaboradores do projeto.\n10. Durante o processo de revis\u00e3o, esteja aberto a coment\u00e1rios e sugest\u00f5es de melhorias.\n11. Se necess\u00e1rio, fa\u00e7a as altera\u00e7\u00f5es solicitadas e atualize o Pull Request.\n12. Uma vez que o Pull Request seja aprovado, ele ser\u00e1 mesclado (merged) \u00e0 branch principal do projeto.\n\nLembre-se de manter uma comunica\u00e7\u00e3o clara e respeitosa durante todo o processo de revis\u00e3o e colabora\u00e7\u00e3o. Seja receptivo aos feedbacks e esteja disposto a colaborar com outros membros da equipe.\n</code></pre> </li> </ul>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#iniciando-o-desenvolvimento","title":"Iniciando o desenvolvimento","text":"<p>Para iniciar o desenvolvimento, \u00e9 necess\u00e1rio criar uma branch. Por padr\u00e3o, existem dois tipos de branches: feature e bugfix:</p> <p>feature: Prefixo de branch para novas funcionalidades ou melhorias. Nova funcionalidade: Uma nova fun\u00e7\u00e3o para a API que ainda n\u00e3o existe. Melhoria: Melhoria de uma fun\u00e7\u00e3o j\u00e1 existente ou parte do c\u00f3digo. bugfix: Prefixo de branch que corrige um bug no c\u00f3digo. Sabendo dos prefixos para cada tipo de issue, preencha o sufixo do nome da branch com \"/\" seguido do n\u00famero da Issue.</p> <p>Exemplo: \"feature/xxxx\", \"bugfix/yyyy\".</p> <p>Criando uma branch via terminal:</p> <p><code>git checkout -b &lt;nome da branch&gt;</code> : Esse comando cria a branch com o nome fornecido (n\u00e3o utilizar os \"&lt;&gt;\") e tamb\u00e9m troca para a branch atual de uso.</p>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#criando-issue","title":"Criando issue","text":"<p>Se voc\u00ea encontrou algum bug ou quer sugerir alguma funcionalidade, voc\u00ea pode criar uma issue nesse Link:  Issue.</p> <p>Para criar uma nova Issue, voc\u00ea pode seguir os seguintes passos, todos os passos a seguir come\u00e7am ao acessar a aba de Issues, ou j\u00e1 no template de New issue do reposit\u00f3rio.</p> <p>Dentro do template de New issue, no input de \"Title\", escreva brevemente o que a nova issue deve fazer, e ent\u00e3o no input de \"Leave a comment\", fa\u00e7a uma descri\u00e7\u00e3o mais detalhada sobre como a issue deve ser executada/implementada. Ap\u00f3s as especifica\u00e7\u00f5es da nova issue, ao lado direito existem alguns complementos importantes:</p> <ul> <li> <p>Em \"Assignees\" voc\u00ea pode escolher a pessoa respons\u00e1vel para a execu\u00e7\u00e3o da issue, caso o objetivo seja apenas deixar a issue registrada, n\u00e3o precisa atribuir, caso queira pegar uma issue, siga para se\u00e7\u00e3o atribuindo uma issue.</p> </li> <li> <p>Em \"Labels\" voc\u00ea define que tipo de feature e caracter\u00edstica essa issue possui, como \"bug\", para uma issue referente a um bug no sistema, \"documentation\" issue que mexe com algum arquivo referente a documenta\u00e7\u00e3o do projeto, \"enhancement\", para issue referente a uma nova feature ou melhoria para o sistema, existem v\u00e1rias labels e Issue podem receber v\u00e1rias labels e n\u00e3o s\u00e3o obrigat\u00f3rias para a cria\u00e7\u00e3o de uma. Ap\u00f3s esses passos a sua issue est\u00e1 pronta para ser criada, clique em \"Submit new issue\" e receba a nova issue com um \"#\" seguido de um valor num\u00e9rico, um identificador para a issue, e este identificador ser\u00e1 utilizado no coment\u00e1rio do seu Pull Request para ser feito o link entre a issue e o Pull Request.</p> </li> </ul>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#atribuindo-uma-issue","title":"Atribuindo uma issue","text":"<p>Para atribuir uma issue, voc\u00ea precisa acessar a aba de Issues, ao selecionar uma issue, ela ser\u00e1 aberta e poder\u00e1 receber atribui\u00e7\u00e3o(\u00f5es) ao clicar em \"Assignees\", ent\u00e3o selecionar quem dever\u00e1 fazer parte do desenvolvimento dessa issue. Lembrando que em Assignees, n\u00e3o ser\u00e3o as mesmas pessoas que ir\u00e3o revisar o seu Pull Request.</p>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#submetendo-contribuicoes","title":"Submetendo contribui\u00e7\u00f5es","text":"<p>Ao concluir a sua contribui\u00e7\u00e3o \u00e9 hora de fazer o famoso Pull Request, onde ele ser\u00e1 revisado pela comunidade e ent\u00e3o, se tudo estiver de acordo com as expectativas dos revisores, o Pull Request ser\u00e1 aceito. Mas para isso, \u00e9 preciso seguir alguns passos primeiro, \u00e9 preciso preparar os arquivos que ser\u00e3o adicionados para o commit e consequentemente para o Pull Request/Revis\u00e3o, com os seguintes passos no terminal:</p> <ul> <li> <p><code>git add \"&lt;nome do arquivo&gt;\"</code> ou <code>git add .</code>  : Esse comando adiciona o arquivo mencionado ou todos os arquivos salvos e modificados ao Stage, tamb\u00e9m conhecido como Index ou Staging Area. O Stage \u00e9 o lugar onde os arquivos est\u00e3o sendo preparados para o commit.</p> </li> <li> <p><code>git commit -m \"&lt;mensagem do commit&gt;\"</code> : Com esse comando, voc\u00ea transfere seus arquivos para o diret\u00f3rio local do git com uma mensagem sobre o commit. \u00c9 muito importante que essa mensagem contenha informa\u00e7\u00f5es sobre as altera\u00e7\u00f5es feitas e refer\u00eancia \u00e0 issue associada \u00e0 contribui\u00e7\u00e3o. A mensagem do commit deve conter uma refer\u00eancia \u00e0 issue, que \u00e9 feita atrav\u00e9s de # seguido do n\u00famero de identifica\u00e7\u00e3o da issue no GitHub, seguido de uma breve descri\u00e7\u00e3o do que foi feito.</p> </li> <li> <p><code>git push</code> : Com o git push, os arquivos ser\u00e3o enviados para o reposit\u00f3rio na nuvem do GitHub. \u00c9 poss\u00edvel que solicite suas credenciais, informe-as e continue o procedimento. Caso a branch ainda n\u00e3o exista no reposit\u00f3rio do GitHub, ser\u00e1 exibida uma mensagem no terminal para publicar a branch. Copie a mensagem e execute-a para enviar suas altera\u00e7\u00f5es. No reposit\u00f3rio do GitHub do projeto, ao estar logado com as mesmas credenciais, ser\u00e1 exibida uma mensagem informando que existe um Pull Request a ser solicitado.</p> </li> </ul>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#contribuindo-com-o-codigo","title":"Contribuindo com o c\u00f3digo","text":"<p>Para contribui\u00e7\u00e3o de c\u00f3digo, temos 3 categorias para uma issue:</p> <ul> <li> <p>Nova funcionalidade: S\u00e3o acr\u00e9scimos de novas fun\u00e7\u00f5es ou recursos que ainda n\u00e3o existem no projeto, e possuem como t\u00edtulo da branch \"feature\".</p> </li> <li> <p>Melhoria: S\u00e3o mudan\u00e7as em fun\u00e7\u00f5es ou recursos que j\u00e1 existem no projeto, possuindo o t\u00edtulo de branch \"feature\".</p> </li> <li> <p>Bug: Os bugs s\u00e3o divididos em dois tipos: cr\u00edticos e n\u00e3o cr\u00edticos, ambos com o t\u00edtulo de branch \"bugfix\".</p> </li> <li> <p>Cr\u00edticos: Afetam gravemente alguma funcionalidade importante do sistema, o que torna a aplica\u00e7\u00e3o inutiliz\u00e1vel ou de dif\u00edcil acesso.   N\u00e3o cr\u00edticos: S\u00e3o bugs que causam apenas um leve inc\u00f4modo na aplica\u00e7\u00e3o, n\u00e3o impactando significativamente a funcionalidade.</p> </li> </ul>"},{"location":"DESENVOLVEDORES/Contribui%C3%A7%C3%A3o/Gerenciamento-de-contribui%C3%A7%C3%B5es/#contribuindo-com-a-documentacao","title":"Contribuindo com a documenta\u00e7\u00e3o","text":"<p>A documenta\u00e7\u00e3o de um software est\u00e1 sempre sujeita a mudan\u00e7as de acordo com as novas funcionalidades que s\u00e3o desenvolvidas. Portanto, atualiza\u00e7\u00f5es s\u00e3o necess\u00e1rias para manter a integridade entre os desenvolvedores e os usu\u00e1rios da ferramenta. Contribuir com a documenta\u00e7\u00e3o \u00e9 importante para garantir que o software e a documenta\u00e7\u00e3o estejam sempre alinhados. Consulte a Documenta\u00e7\u00e3o para mais informa\u00e7\u00f5es.</p> <p>Outros arquivos, como o README, C\u00f3digo de Conduta e este guia de contribui\u00e7\u00f5es, podem receber novas altera\u00e7\u00f5es caso sejam necess\u00e1rias. Abra uma issue e comece a contribuir agora mesmo.</p>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-api-Instala%C3%A7%C3%A3o/","title":"Instala\u00e7\u00e3o - Tracy API","text":""},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-api-Instala%C3%A7%C3%A3o/#requisitos","title":"Requisitos","text":"<p>Para construir e executar a aplica\u00e7\u00e3o, voc\u00ea precisa dos seguintes requisitos:</p> <ul> <li>Java Jre 8</li> <li>Java JDK 11</li> <li>PostgresSQL 11.5</li> <li>Git</li> <li>Intellij IDE  (Para uso com a parte de back end)</li> <li>Vs Code IDE  (Se desejar usar na parte de front end. Caso contr\u00e1rio, o intelijj pode ser usado tamb\u00e9m)</li> <li>Maven  (Baixe o arquivo Bynary.zip)</li> <li>CMD ou Windows Powershell</li> </ul>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-api-Instala%C3%A7%C3%A3o/#tutorial-de-instalacao","title":"Tutorial de instala\u00e7\u00e3o","text":"<ul> <li>Certifique-se de ter instalado todos os requisitos e, em seguida, siga as etapas abaixo. </li> </ul>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-api-Instala%C3%A7%C3%A3o/#primeiro-passo-backend","title":"Primeiro Passo: Backend","text":"<ul> <li>Clone os reposit\u00f3rios tracy-api e traExecute mvn clean install</li> <li>Execute <code>mvn clean install</code></li> <li>Crie o banco de dados no  Postgres e nomeie-o como tracytd</li> <li>Abra o c\u00f3digo da API Rest no Intellij. V\u00e1 para src &gt; main &gt; resources e crie um arquivo chamado \"application-dev.yml\".</li> <li> <p>Cole o seguinte c\u00f3digo dentro do arquivo:</p> <pre><code>spring:\ndatasource:\nurl: jdbc:postgresql://localhost:5432/tracytd\nusername: postgres\npassword: tuasenha (substituir pela senha do postgres)\n</code></pre> </li> <li> <p>Executar o comando <code>mvn clean install</code> no terminal do intellij.</p> </li> <li>No Intellij, v\u00e1 para o menu \"Add Configuration\" e crie uma nova configura\u00e7\u00e3o clicando no sinal \"+\" no canto superior esquerdo. Escolha a categoria \"Application\".</li> <li> <p>No menu seguinte, complete os campos com essas instru\u00e7\u00f5es:</p> <pre><code>name: \"tracy-api\"\n\nmain class: procure a classe \"tracy application\"\n</code></pre> </li> <li> <p>No campo \"Modify options\", escolha a op\u00e7\u00e3o \"Add vm options\", e no campo com o mesmo nome, cole o seguinte c\u00f3digo:</p> <pre><code>-Dspring.profiles.active=dev\n</code></pre> </li> </ul> <p>-Apos isso, no campo Environment variables cole o seguinte c\u00f3digo : </p> <pre><code>    env.TRACY_API_VERSION=SNAPSHOT\n</code></pre> <ul> <li>Depois disso, clique em aplicar e ok. Se o campo \"Add configuration\" n\u00e3o mudar automaticamente, mude ele para a nova configura\u00e7\u00e3o.</li> <li>Rode o projeto! \u00a0</li> </ul>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-api-Instala%C3%A7%C3%A3o/#como-conseguir-ajuda","title":"Como conseguir ajuda?","text":"<p>Voc\u00ea dever\u00e1 acessar o canal do Discord, onde ter\u00e1 acesso aos desenvolvedores trabalhando no projeto, assim como outras pessoas que est\u00e3o usando Tracy em suas empresas.</p>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-front-Instala%C3%A7%C3%A3o/","title":"Instala\u00e7\u00e3o - Tracy Front","text":""},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-front-Instala%C3%A7%C3%A3o/#requisitos","title":"Requisitos","text":"<p>Para construir e executar a aplica\u00e7\u00e3o, voc\u00ea precisa dos seguintes requisitos:</p> <ul> <li>Git</li> <li>Vs Code IDE</li> <li>https://nodejs.org.</li> </ul>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-front-Instala%C3%A7%C3%A3o/#tutorial-de-instalacao","title":"Tutorial de instala\u00e7\u00e3o","text":"<ul> <li>Clone o reposit\u00f3rio tracy-front. (Em caso de problemas usando a funcionalidade do git bash, voc\u00ea pode usar o CMD para fazer isso)</li> <li>Abra o projeto com o Vs Code e execute o comando npm i. Isso vai levar alguns minutos para ser conclu\u00eddo.</li> <li>Ap\u00f3s a conclus\u00e3o, execute o comando ng s. Isso vai demorar um pouco mais.</li> <li>Quando finalizar, abra seu navegador e acesse \"localhost:4200\".</li> <li>Insira o login \"root@tracy-td.io\" e a senha \"rootadmin\".</li> <li>Pronto!</li> </ul>"},{"location":"DESENVOLVEDORES/Instala%C3%A7%C3%A3o/Tracy-front-Instala%C3%A7%C3%A3o/#como-conseguir-ajuda","title":"Como conseguir ajuda?","text":"<p>Voc\u00ea dever\u00e1 acessar o canal do Discord, onde ter\u00e1 acesso aos desenvolvedores trabalhando no projeto, assim como outras pessoas que est\u00e3o usando Tracy em suas empresas.</p>"},{"location":"DESENVOLVEDORES/Processo_de_Desenvolvimento/Processo-De-Desenvolvimento/","title":"Processo de Desenvolvimento","text":"<p>O processo de desenvolvimento do projeto Tracy-TD segue uma abordagem iterativa e colaborativa, permitindo que a equipe trabalhe de forma eficiente e eficaz. A seguir, descrevemos os passos envolvidos nesse processo:</p> <ol> <li> <p>Planejamento da Sprint: No in\u00edcio de cada sprint, a equipe realiza uma reuni\u00e3o de planejamento para definir as metas e prioridades da itera\u00e7\u00e3o. Durante essa reuni\u00e3o, as tarefas s\u00e3o discutidas e atribu\u00eddas aos membros da equipe.</p> </li> <li> <p>Selecionar tarefa: Com base nas metas estabelecidas, cada membro da equipe seleciona uma tarefa para trabalhar. Essas tarefas est\u00e3o registradas no sistema de gerenciamento de problemas, como o GitHub Issues, e s\u00e3o acompanhadas de descri\u00e7\u00f5es detalhadas.</p> </li> <li> <p>Criar nova branch: Antes de iniciar o desenvolvimento da tarefa, \u00e9 criada uma nova branch no reposit\u00f3rio do projeto. Essa branch \u00e9 usada para isolar as altera\u00e7\u00f5es relacionadas \u00e0 tarefa espec\u00edfica e facilitar o controle de vers\u00e3o.</p> </li> <li> <p>Pensar!: Antes de come\u00e7ar a codificar, \u00e9 importante dedicar um tempo para analisar e planejar a abordagem a ser adotada. Nesse momento, a equipe realiza discuss\u00f5es t\u00e9cnicas e busca compreender a melhor forma de resolver o problema em quest\u00e3o.</p> </li> <li> <p>Codificar!: Com o planejamento em mente, os desenvolvedores iniciam a codifica\u00e7\u00e3o da solu\u00e7\u00e3o. Eles seguem as melhores pr\u00e1ticas de desenvolvimento de software e utilizam as ferramenta5. s e tecnologias adequadas ao projeto.</p> </li> <li> <p>Pull Request: Ap\u00f3s concluir o desenvolvimento da tarefa, \u00e9 feito um Pull Request para integrar as altera\u00e7\u00f5es \u00e0 branch principal do projeto. O Pull Request inclui uma descri\u00e7\u00e3o clara das altera\u00e7\u00f5es realizadas e pode ser revisado por outros membros da equipe.</p> </li> <li> <p>Revis\u00e3o de C\u00f3digo / PR: O Pull Request passa por um processo de revis\u00e3o de c\u00f3digo, no qual outros membros da equipe analisam o c\u00f3digo, oferecem feedbacks e sugerem melhorias. Essa revis\u00e3o ajuda a garantir a qualidade do c\u00f3digo e a consist\u00eancia com os padr\u00f5es definidos.</p> </li> <li> <p>Merge!: Ap\u00f3s a revis\u00e3o e aprova\u00e7\u00e3o do Pull Request, as altera\u00e7\u00f5es s\u00e3o mescladas \u00e0 branch principal do projeto. Esse processo garante a incorpora\u00e7\u00e3o das altera\u00e7\u00f5es e a atualiza\u00e7\u00e3o do c\u00f3digo-fonte do projeto como um todo.</p> </li> </ol>"},{"location":"DESENVOLVEDORES/Processo_de_Desenvolvimento/Processo-De-Desenvolvimento/#discussoes-tecnicas","title":"Discuss\u00f5es T\u00e9cnicas","text":"<p>Durante todo o processo de desenvolvimento, a equipe tamb\u00e9m realiza discuss\u00f5es t\u00e9cnicas e atualiza\u00e7\u00f5es do modelo de arquitetura, buscando manter uma vis\u00e3o clara e atualizada da estrutura e componentes do Tracy-TD.</p> <p>Esse processo iterativo permite uma evolu\u00e7\u00e3o cont\u00ednua do projeto, promovendo a entrega de valor aos usu\u00e1rios e a melhoria constante da qualidade do software.</p>"},{"location":"DESENVOLVEDORES/Processo_de_Desenvolvimento/Processo-De-Desenvolvimento/#diagrama","title":"Diagrama","text":"<p>O diagrama \"Development Process\" ilustra uma vis\u00e3o geral do processo de desenvolvimento adotado no projeto Tracy-TD. O processo \u00e9 composto por etapas bem definidas, desde o planejamento das tarefas at\u00e9 a revis\u00e3o e mesclagem do c\u00f3digo. Cada etapa desempenha um papel importante no fluxo de trabalho da equipe, garantindo um desenvolvimento eficiente e de qualidade. Atrav\u00e9s desse processo, a equipe colabora de forma estruturada e organizada, resultando em entregas consistentes e alinhadas com as metas e objetivos do projeto Tracy-TD.</p> <p></p>"},{"location":"DESENVOLVEDORES/Testes/Guia-Teste/","title":"Testes unit\u00e1rios com Mock para as classes de servi\u00e7os.","text":"<p>Ser\u00e3o demonstradas neste guia de teste, as 4 fun\u00e7\u00f5es de um CRUD e exce\u00e7\u00e3o, para que assim, seja poss\u00edvel que se tenha uma ideia b\u00e1sica de como continuar com a implementa\u00e7\u00e3o de testes.</p> <p>Um teste \u00e9 composto por 3 fases: Prepara\u00e7\u00e3o, Execu\u00e7\u00e3o e Valida\u00e7\u00e3o.</p> <ul> <li>Prepara\u00e7\u00e3o: nessa etapa \u00e9 criado todos os argumentos necess\u00e1rios e configura\u00e7\u00f5es para que o teste possa representar o mais pr\u00f3ximo do cen\u00e1rio real;</li> <li>Execu\u00e7\u00e3o: aqui onde se utiliza os argumentos produzidos na prepara\u00e7\u00e3o e executamos o metodo do servi\u00e7o a qual queremos testar;</li> <li>Valida\u00e7\u00e3o: a fase mais importante de um teste, onde ocorre todas as verifica\u00e7\u00f5es da execu\u00e7\u00e3o do teste e se ocorreu como esperado;</li> </ul> <p>Para testarmos um servi\u00e7o, vamos come\u00e7ar criando a classe de teste, caso a classe de teste n\u00e3o exista. A nomenclatura da classe de teste deve seguir um padr\u00e3o \"{nome da classe do servi\u00e7o}\" + \"Test\", por exemplo: \"TechnicalDebtServiceTest\". O local em que esse arquivo deve est\u00e1 \u00e9 no path do projeto em \"src/test/java/org/{nome_do_projeto}\" dentro de um diret\u00f3rio que o servi\u00e7o fa\u00e7a parte, para o exemplo em quest\u00e3o o diret\u00f3rio \u00e9 \"technicalDebt\", resultando no seguinte path: \"src/test/java/org/tracy/technicaldebt\", logo ap\u00f3s adicionamos a anota\u00e7\u00e3o @Tag(\"Service\") e @ExtendWith(MockitoExtension.class) em cima do \"public class\".</p> <pre><code>@Tag(\"Service\")\n@ExtendWith(MockitoExtension.class)\npublic class TechnicalDebtServiceTest {\n\n}\n</code></pre> <p>Agora precisamos pegar os atributos da classe de servi\u00e7o para a qual os testes devem ser feitos e passar como atributos da classe teste, os atributos que forem outros servi\u00e7os e reposit\u00f3rios, devem receber a anota\u00e7\u00e3o @Mock.</p> <pre><code>@Tag(\"Service\")\n@ExtendWith(MockitoExtension.class)\npublic class TechnicalDebtServiceTest {\n\n   @Mock\n   private ITAssetService assetService;\n\n   @Mock\n   private BusinessProcessService businessProcessService;\n\n   @Mock\n   private BusinessMetricService businessMetricService;\n\n   ...\n}\n</code></pre> <p>Ap\u00f3s todos os atributos necess\u00e1rios para a classe de servi\u00e7o estiverem \"mockados\" deve ser injetado todos os mocks em uma inst\u00e2ncia do servi\u00e7o, isso pode ser feito atrav\u00e9s da anota\u00e7\u00e3o @InjectMocks ou atrav\u00e9s de um m\u00e9todo de constru\u00e7\u00e3o anotado por um @Beforeach, damos prefer\u00eancia ao @InjectMocks.</p> <pre><code>@Tag(\"Service\")\n@ExtendWith(MockitoExtension.class)\npublic class TechnicalDebtServiceTest {\n\n   @Mock\n   private ITAssetService assetService;\n\n   @Mock\n   private BusinessProcessService businessProcessService;\n\n   @Mock\n   private BusinessMetricService businessMetricService;\n\n   ...\n\n   @Mock\n   private BusinessCanvasService businessCanvasService;\n\n   @InjectMocks\n   private TechnicalDebtService technicalDebtService;\n\n}\n</code></pre> <p>Com todos as depend\u00eancias injetadas no servi\u00e7o para ser testado, partimos para cria\u00e7\u00e3o do teste unit\u00e1rio, na mesma classe. Iniciamos o m\u00e9todo de teste com uma nomenclatura a qual deve de forma mais clara poss\u00edvel identificar a valida\u00e7\u00e3o do teste.  </p> <p>Todos os testes devem ter como retorno o tipo void, e uma anota\u00e7\u00e3o obrigat\u00f3ria @Test e uma opcional @DisplayName (pode haver outras anota\u00e7\u00f5es opcionais), a anota\u00e7\u00e3o @Test marca o m\u00e9todo como teste, fazendo com que o testrunner execute os m\u00e9todos anotados, al\u00e9m de poder executar cada um isoladamente. J\u00e1 o @DisplayName d\u00e1 uma t\u00edtulo ao teste, para que na interface seja visto com mais detalhes o que o teste se prop\u00f5em a fazer, nesta anota\u00e7\u00e3o voc\u00ea pode escrever em qualquer l\u00edngua, desde que fique claro e compat\u00edvel.</p> <p>Como primeiro exemplo, ser\u00e1 testado a cria\u00e7\u00e3o de uma TechnicalDebt, ent\u00e3o, para o nome do m\u00e9todo de teste algo parecido com \"shouldSaveTechnicalDebt\", com o retorno void e duas anota\u00e7\u00f5es, no DisplayName evidenciando a valida\u00e7\u00e3o do teste:</p> <pre><code>   @Test\n   @DisplayName(\"Deve salvar uma divida tecnica\")\n   void shouldSaveTechnicalDebt() {\n\n   }\n</code></pre> <p>Agora vamos para a primeira etapa do teste, a prepara\u00e7\u00e3o, aqui vamos olhar para o fluxo m\u00e9todo \"save\" do servi\u00e7o \"TechnicalDebtService\" e criar as entidades e configura\u00e7\u00f5es que precisaremos para a segunda e terceira etapa.</p> <p>No m\u00e9todo save, vemos dois par\u00e2metros \"TechnicalDebt\" e \"Feedback\", os quais precisamos ent\u00e3o cri\u00e1-los na prepara\u00e7\u00e3o do teste, a primeira etapa. Ent\u00e3o, em uma breve an\u00e1lise notamos que precisamos mockar o retorno do saveAndFlush() do reposit\u00f3rio \"technicalDebtRepository\". Para o teste em quest\u00e3o \u00e9 necess\u00e1rio mockar outros comportamentos de outras classes (servi\u00e7os e reposit\u00f3rios), mas para esse guia n\u00e3o ficar extenso n\u00e3o ser\u00e3o detalhados.</p> <pre><code>   @Transactional\n   public TechnicalDebt save(TechnicalDebt technicalDebt, Feedback feedback) {\n      initializeLists(technicalDebt);\n\n      if(technicalDebt.getBusinessPriority() == null){\n           technicalDebt.setBusinessPriority(BusinessPriorityValue.UNDEFINED.value);\n       }\n       if(technicalDebt.getIssue() != null &amp;&amp; technicalDebt.getIssue().getAssignedTo() != null){\n           technicalDebt.setAssignedTo(technicalDebt.getAssignedTo());\n       }\n\n      List&lt;TechnicalDebtImpact&gt; impactsToChange = technicalDebt.getTechnicalDebtImpacts();\n       technicalDebt.setTechnicalDebtImpacts(new LinkedList&lt;&gt;());\n       TechnicalDebt technicalDebtAfterSave = this.technicalDebtRepository.saveAndFlush(technicalDebt);\n       persistTechImpacts(technicalDebt);\n       updateTechnicalDebtImpacts(technicalDebtAfterSave, impactsToChange);\n       updateAndSaveBusinessPriority(technicalDebtAfterSave, \"TD_CREATE\", feedback);\n       this.technicalDebtRepository.flush();\n\n       return technicalDebtAfterSave;\n   }\n</code></pre> <p>Na primeira etapa criamos os objetos e configuramos os retornos mocks dos atributos anotados com @Mock atrav\u00e9s do m\u00e9todo \"when()\" do Mockito seguido de um \".return()\" com o objeto simulado no retorno real do m\u00e9todo da classe mockada, mas primeiro, precisamos construir esses retornos, e para facilitar a constru\u00e7\u00e3o de tais objetos utilizamos os m\u00e9todos est\u00e1ticos, builders, para poupar tempo e linhas de c\u00f3digo. Na linha 148 o comportamento do reposit\u00f3rio \u00e9 simulado, utilizando o \"when()\", note que \u00e9 preciso especificar qual m\u00e9todo a classe mockada est\u00e1 chamando e passar como par\u00e2metro a classe que o m\u00e9todo espera, e no \".return()\", a simula\u00e7\u00e3o do retorno, o objeto technicalDebt.</p> <pre><code>   @Test\n   @DisplayName(\"Deve salvar uma d\u00edvida t\u00e9cnica\")\n   void shouldSaveTechnicalDebt() {\n\n       ConfigItem configItemReturn = createConfigItem().id(1L).build();\n       TechnicalDebt technicalDebt = createTechnicalDebt().build();\n       Feedback feedback = createFeedBack().build();\n       PriorityCanvas priorityCanvas = createPriorityCanvas().build();\n\n       when(configItemService.findById(anyLong())).thenReturn(configItemReturn);\n       when(technicalDebtRepository.saveAndFlush(any(TechnicalDebt.class))).thenReturn(technicalDebt);\n       when(technicalDebtRepository.save(any(TechnicalDebt.class))).thenReturn(technicalDebt);\n       when(priorityCanvasRepository.findAllByOrganizationId(anyLong()))\n               .thenReturn(Collections.singletonList(priorityCanvas));\n\n   }\n</code></pre> <p>Com as entidades criadas e retornos simulados como esperado, continuamos para a segunda etapa do teste, a execu\u00e7\u00e3o, bem simples, apenas chamamos o m\u00e9todo a qual queremos testar e passamos seus devidos par\u00e2metros.</p> <pre><code>   @Test\n   @DisplayName(\"Deve salvar uma d\u00edvida t\u00e9cnica\")\n   void shouldSaveTechnicalDebt() {\n\n       ...\n\n       when(configItemService.findById(anyLong())).thenReturn(configItemReturn);\n       when(technicalDebtRepository.saveAndFlush(any(TechnicalDebt.class))).thenReturn(technicalDebt);\n       when(technicalDebtRepository.save(any(TechnicalDebt.class))).thenReturn(technicalDebt);\n       when(priorityCanvasRepository.findAllByOrganizationId(anyLong()))\n               .thenReturn(Collections.singletonList(priorityCanvas));\n\n       technicalDebtService.save(technicalDebt, feedback);\n\n       ArgumentCaptor&lt;TechnicalDebt&gt; technicalDebtArgumentCaptor = ArgumentCaptor.forClass(TechnicalDebt.class);\n       ArgumentCaptor&lt;PriorityLog&gt; priorityLogArgumentCaptor = ArgumentCaptor.forClass(PriorityLog.class);\n\n</code></pre> <p>Depois da prepara\u00e7\u00e3o e execu\u00e7\u00e3o, chegou a vez da valida\u00e7\u00e3o dos resultados, em alguns casos, \u00e9 preciso saber como o objeto chegou ao reposit\u00f3rio/servi\u00e7o, momento que o objeto \u00e9 passado por par\u00e2metro do m\u00e9todo, e para isso \u00e9 necess\u00e1rio a cria\u00e7\u00e3o de objetos do tipo ArgumentCaptor, ele \u00e9 capaz de capturar os objetos nos par\u00e2metros e \u00e9 usado em conjunto com o m\u00e9todo \"verify()\". </p> <p>O m\u00e9todo verify verifica as ocorr\u00eancias das chamadas aos m\u00e9todos da classe que foram utilizados durante a execu\u00e7\u00e3o do teste, que por padr\u00e3o \u00e9 \"times(1)\", uma ocorr\u00eancia do m\u00e9todo da inst\u00e2ncia, o times \u00e9 o segundo par\u00e2metro do m\u00e9todo verify(), em seguida utiliza-se o \".\" mas o m\u00e9todo que deseja verificar a ocorr\u00eancia, que para esse exemplo vamos focar no \"saveAndFlush()\", linha 158, que \u00e9 passado como par\u00e2metro um ArgumentCaptor do tipo TechnicalDebt, que \u00e9 justamente a classe que chega para ser salva no reposit\u00f3rio.  </p> <p>Com o m\u00e9todo \"capture()\" do ArgumentCaptor para capturar o valor e depois utilizamos o m\u00e9todo \"getValue()\" para pegar o valor capturado e armazenar em uma vari\u00e1vel, essa vari\u00e1vel ser\u00e1 utilizado para verifica\u00e7\u00e3o dos campos.</p> <pre><code>       ArgumentCaptor&lt;TechnicalDebt&gt; technicalDebtArgumentCaptor = ArgumentCaptor.forClass(TechnicalDebt.class);\n       ArgumentCaptor&lt;PriorityLog&gt; priorityLogArgumentCaptor = ArgumentCaptor.forClass(PriorityLog.class);\n\n       verify(technicalDebtRepository).saveAndFlush(technicalDebtArgumentCaptor.capture());\n       TechnicalDebt beforeSaveTechnicalDebt = technicalDebtArgumentCaptor.getValue();\n       verify(impactService).saveAll(any());\n       verify(technicalDebtRepository).save(technicalDebtArgumentCaptor.capture());\n       TechnicalDebt afterSaveTechnicalDebt = technicalDebtArgumentCaptor.getValue();\n       verify(logRepository).save(priorityLogArgumentCaptor.capture());\n       PriorityLog priorityLog = priorityLogArgumentCaptor.getValue();\n</code></pre> <p>A verifica\u00e7\u00e3o dos campos \u00e9 feita atrav\u00e9s dos assertions, aqui se compara os valores atuais dos valores esperados, dessa maneira validando campo a campo. \u00c9 importante que todos os campos sejam validados, pois, durante o fluxo \u00e9 poss\u00edvel que algum valor seja alterado, e essa altera\u00e7\u00e3o possa ser parte do fluxo ou um bug gerado, \u00e9 aqui que est\u00e1 a import\u00e2ncia do teste unit\u00e1rio, ele garante que para aquele fluxo o comportamento seja o esperado.</p> <pre><code>   @Test\n   @DisplayName(\"Deve salvar uma divida tecnica\")\n   void shouldSaveTechnicalDebt() {\n\n       ...\n\n       verify(technicalDebtRepository).saveAndFlush(technicalDebtArgumentCaptor.capture());\n       TechnicalDebt beforeSaveTechnicalDebt = technicalDebtArgumentCaptor.getValue();\n       verify(impactService).saveAll(any());\n       verify(technicalDebtRepository).save(technicalDebtArgumentCaptor.capture());\n       TechnicalDebt afterSaveTechnicalDebt = technicalDebtArgumentCaptor.getValue();\n       verify(logRepository).save(priorityLogArgumentCaptor.capture());\n       PriorityLog priorityLog = priorityLogArgumentCaptor.getValue();\n\n       assertAll(\"beforeSaveTechnicalDebt\",\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getName(), is(technicalDebt.getName())),\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getDescription(), is(technicalDebt.getDescription())),\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getBusinessPriority(), is(technicalDebt.getBusinessPriority())),\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getTechnicalPriority(), is(technicalDebt.getTechnicalPriority())),\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getCheckedByUser(), is(technicalDebt.getCheckedByUser())),\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getEnabled(), is(technicalDebt.getEnabled())),\n               () -&gt; assertThat(beforeSaveTechnicalDebt.getType(), is(technicalDebt.getType()))\n       );\n\n       assertAll(\"afterSaveTechnicalDebt\",\n               () -&gt; assertThat(afterSaveTechnicalDebt.getTechnicalPriority(), is(technicalDebt.getTechnicalPriority())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getName(), is(technicalDebt.getName())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getDescription(), is(technicalDebt.getDescription())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getBusinessPriority(), is(technicalDebt.getBusinessPriority())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getTechnicalPriority(), is(technicalDebt.getTechnicalPriority())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getCheckedByUser(), is(technicalDebt.getCheckedByUser())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getEnabled(), is(technicalDebt.getEnabled())),\n               () -&gt; assertThat(afterSaveTechnicalDebt.getType(), is(technicalDebt.getType()))\n       );\n\n       assertAll(\"priorityLog\",\n               () -&gt; assertThat(priorityLog.getTrigger(), is(\"TD_CREATE\")),\n               () -&gt; assertThat(priorityLog.getTdType(), is(\"TechnicalDebtType Name\")),\n               () -&gt; assertThat(priorityLog.getOldBusinessPriority(), is(1000)),\n               () -&gt; assertThat(priorityLog.getNewBusinessPriority(), is(100)),\n               () -&gt; assertThat(priorityLog.getOldTechnicalPriority(), is(1000)),\n               () -&gt; assertThat(priorityLog.getNewTechnicalPriority(), is(1000)),\n               () -&gt; assertThat(priorityLog.getComment(), is(\"FeedBack Comment\")),\n               () -&gt; assertFalse(priorityLog.getPrioritizedByImpact()),\n               () -&gt; assertFalse(priorityLog.getPrioritizedByEffort()),\n               () -&gt; assertFalse(priorityLog.getPrioritizedByType()),\n               () -&gt; assertFalse(priorityLog.getPrioritizedByAge())\n       );\n   }\n</code></pre> <p>Builders s\u00e3o os m\u00e9todos que fazem inst\u00e2ncia da classe e que voc\u00ea pode alterar os campos enquanto chama o m\u00e9todo, como na linha 142 onde o campo \"id\" est\u00e1 sendo setado com o valor 1L. Os builders ficam no path referente aos testes, em: \"src/test/java/org/tracy/builders\". Builders podem possuir outros builders para facilitar a sua constru\u00e7\u00e3o, mas cuidado para n\u00e3o gerar recurs\u00e3o entre eles.</p> <pre><code>public class ConfigItemBuilder {\n\n   public static ConfigItem.Builder createConfigItem() {\n       return ConfigItem.builder()\n               .id(1L)\n               .name(\"ConfigItem Name\")\n               .description(\"ConfigItem Description\")\n               .type(createConfigItemType().build())\n               .status(Status.OPERATIONAL)\n               .children(Collections.singletonList(createConfigItemChildren().build()))\n               .organization(createOrganization().build())\n               .affectedITAssets(Collections.singletonList(createITAsset().build()))\n               .teams(Collections.singletonList(createTeam().build()));\n   }\n}\n</code></pre>"},{"location":"EMPRESAS/Empresas_Parceiras/","title":"Empresas Parceiras","text":""},{"location":"EMPRESAS/Empresas_Parceiras/#como-faco-pra-minha-empresa-virar-parceira-da-tracy","title":"Como Fa\u00e7o pra minha Empresa Virar Parceira da Tracy ?","text":"<p>Entre em contato: E-mail: rodrigor@dcx.ufpb.br</p> <p>Sinta-se \u00e0 vontade para  enviar um e-mail para o endere\u00e7o acima caso em caso de d\u00favida, sugest\u00e3o ou precise de mais informa\u00e7\u00f5es. Estamos ansiosos para ouvir de voc\u00ea e responder prontamente \u00e0s suas mensagens.</p>"},{"location":"EMPRESAS/Valor_Tracy/","title":"Como a tracy pode acrescentar valor na sua\u00a0empresa\u00a0?","text":"<p>A Tracy-TD \u00e9 muito mais do que apenas uma plataforma de gest\u00e3o de d\u00e9bitos t\u00e9cnicos. Ela oferece in\u00fameras vantagens e benef\u00edcios que podem agregar valor significativo \u00e0 sua empresa, otimizando o desenvolvimento de software e aprimorando a efici\u00eancia operacional. Aqui est\u00e3o algumas maneiras pelas quais a Tracy-TD pode acrescentar valor \u00e0 sua empresa:</p>"},{"location":"EMPRESAS/Valor_Tracy/#identificacao-e-priorizacao-de-dividas-tecnicas","title":"Identifica\u00e7\u00e3o e Prioriza\u00e7\u00e3o de D\u00edvidas T\u00e9cnicas","text":"<p>A Tracy-TD permite que sua empresa identifique e acompanhe de forma minuciosa as d\u00edvidas t\u00e9cnicas existentes em seus projetos de software. Com ferramentas e m\u00e9tricas avan\u00e7adas, voc\u00ea poder\u00e1 visualizar e priorizar as d\u00edvidas t\u00e9cnicas com base em crit\u00e9rios t\u00e9cnicos e de neg\u00f3cios. Isso ajuda a focar os esfor\u00e7os da equipe de desenvolvimento na resolu\u00e7\u00e3o dos problemas mais cr\u00edticos, evitando o ac\u00famulo de d\u00e9bitos t\u00e9cnicos no futuro.</p>"},{"location":"EMPRESAS/Valor_Tracy/#integracao-com-ferramentas-de-desenvolvimento","title":"Integra\u00e7\u00e3o com Ferramentas de Desenvolvimento","text":"<p>A Tracy-TD possui integra\u00e7\u00f5es com v\u00e1rias ferramentas populares de desenvolvimento, como o Gitlab, Redmine e Jira. Essas integra\u00e7\u00f5es proporcionam uma vis\u00e3o completa do status das d\u00edvidas t\u00e9cnicas em diferentes etapas do ciclo de desenvolvimento. Isso simplifica o fluxo de trabalho, reduzindo o tempo gasto na coordena\u00e7\u00e3o entre equipes e permitindo uma colabora\u00e7\u00e3o mais eficiente.</p>"},{"location":"EMPRESAS/Valor_Tracy/#aumento-da-eficiencia-e-produtividade","title":"Aumento da Efici\u00eancia e Produtividade","text":"<p>Ao priorizar e resolver as d\u00edvidas t\u00e9cnicas, sua equipe de desenvolvimento pode trabalhar de forma mais eficiente e produtiva. A Tracy-TD oferece insights valiosos para aprimorar a qualidade do c\u00f3digo, tornando-o mais sustent\u00e1vel e de f\u00e1cil manuten\u00e7\u00e3o. Isso reduz o retrabalho e aumenta a velocidade de entrega de novos recursos e funcionalidades.</p>"},{"location":"EMPRESAS/Valor_Tracy/#reducao-de-riscos-e-custos","title":"Redu\u00e7\u00e3o de Riscos e Custos","text":"<p>A gest\u00e3o adequada de d\u00e9bitos t\u00e9cnicos pode ajudar a mitigar riscos de falhas e problemas no software em produ\u00e7\u00e3o. Ao abordar essas d\u00edvidas t\u00e9cnicas de forma proativa, sua empresa evitar\u00e1 poss\u00edveis interrup\u00e7\u00f5es no funcionamento do sistema e reduzir\u00e1 custos relacionados a corre\u00e7\u00f5es emergenciais. </p>"},{"location":"EMPRESAS/Valor_Tracy/#analise-estrategica-e-tomada-de-decisoes-informadas","title":"An\u00e1lise Estrat\u00e9gica e Tomada de Decis\u00f5es Informadas","text":"<p>Com dados e m\u00e9tricas detalhadas fornecidas pela Tracy-TD, sua empresa poder\u00e1 tomar decis\u00f5es informadas e estrat\u00e9gicas relacionadas ao desenvolvimento de software. Isso inclui a identifica\u00e7\u00e3o de \u00e1reas cr\u00edticas de melhoria, aloca\u00e7\u00e3o de recursos de forma mais eficaz e melhor compreens\u00e3o dos impactos das d\u00edvidas t\u00e9cnicas nas metas de neg\u00f3cios.</p>"},{"location":"EMPRESAS/Valor_Tracy/#faca-da-tracy-td-sua-parceira-estrategica","title":"Fa\u00e7a da Tracy-TD sua Parceira Estrat\u00e9gica","text":"<p>Se sua empresa busca melhorar a efici\u00eancia, qualidade e sustentabilidade de seus projetos de software, a Tracy-TD \u00e9 a parceira estrat\u00e9gica ideal. Nossa plataforma avan\u00e7ada e suporte especializado est\u00e3o prontos para auxiliar sua empresa em sua jornada rumo ao sucesso no desenvolvimento de software</p>"},{"location":"USUARIOS/C%C3%B3digo_De_Conduta/CODE-OF-CONDUCT/","title":"C\u00d3DIGO DE CONDUTA","text":"<p>Inicialmente, expressamos nossa sincera gratid\u00e3o pela sua presen\u00e7a neste ambiente, onde nos alegra imensamente t\u00ea-lo como colaborador da Tracy-TD. O projeto em quest\u00e3o consiste em uma plataforma de gest\u00e3o de d\u00e9bitos t\u00e9cnicos voltada para o contexto empresarial.</p> <p>Atrav\u00e9s desta plataforma, \u00e9 poss\u00edvel realizar o registro minucioso das d\u00edvidas existentes, monitor\u00e1-las de forma cont\u00ednua e, adicionalmente, atribuir prioridades baseadas em crit\u00e9rios tanto t\u00e9cnicos quanto alinhados aos objetivos de neg\u00f3cio da organiza\u00e7\u00e3o.</p>"},{"location":"USUARIOS/C%C3%B3digo_De_Conduta/CODE-OF-CONDUCT/#o-projeto-possui-integracoes-com-outras-plataformas-como-o-gitlab-redmine-e-jira","title":"O projeto possui integra\u00e7\u00f5es com outras plataformas, como o Gitlab, Redmine e Jira.","text":""},{"location":"USUARIOS/C%C3%B3digo_De_Conduta/CODE-OF-CONDUCT/#nossos-votos","title":"Nossos votos","text":"<p>Com o prop\u00f3sito de estabelecer um ambiente acolhedor e confort\u00e1vel para todos os envolvidos, tanto contribuidores quanto mantenedores, comprometemo-nos a garantir que nossa participa\u00e7\u00e3o neste projeto seja livre de qualquer forma de ass\u00e9dio. Essa garantia \u00e9 aplicada a todas as pessoas, independentemente de sua idade, apar\u00eancia f\u00edsica, tamanho corporal, capacidade, etnia, caracter\u00edsticas sexuais, identidade de g\u00eanero ou express\u00e3o de g\u00eanero, n\u00edvel de experi\u00eancia, forma\u00e7\u00e3o educacional, status socioecon\u00f4mico, nacionalidade, ra\u00e7a, religi\u00e3o ou orienta\u00e7\u00e3o sexual.</p>"},{"location":"USUARIOS/C%C3%B3digo_De_Conduta/CODE-OF-CONDUCT/#padroes-comportamentais","title":"Padr\u00f5es Comportamentais:","text":"<p>A seguir, destacamos exemplos de comportamentos que s\u00e3o essenciais para manter um ambiente acolhedor:</p> <ul> <li>Utiliza\u00e7\u00e3o de linguagem inclusiva e respeitosa;</li> <li>Respeito pelos diferentes pontos de vista e n\u00edveis de experi\u00eancia;</li> <li>Aceita\u00e7\u00e3o de cr\u00edticas construtivas com eleg\u00e2ncia e maturidade;</li> <li>Prioriza\u00e7\u00e3o do bem-estar da comunidade;</li> <li>Manifesta\u00e7\u00e3o de empatia para com os demais membros da comunidade.</li> </ul> <p>Por outro lado, \u00e9 importante mencionar exemplos de comportamentos que n\u00e3o s\u00e3o aceit\u00e1veis por parte dos participantes:</p> <ul> <li>Uso de linguagem ou imagens sexualizadas, al\u00e9m de abordagens sexuais indesejadas;</li> <li>Envio de coment\u00e1rios insultuosos, depreciativos, bem como ataques pessoais ou pol\u00edticos;</li> <li>Pr\u00e1tica de ass\u00e9dio, seja em \u00e2mbito p\u00fablico ou privado;</li> <li>Divulga\u00e7\u00e3o de informa\u00e7\u00f5es privadas de terceiros, como endere\u00e7o f\u00edsico ou eletr\u00f4nico, sem autoriza\u00e7\u00e3o expl\u00edcita;</li> <li>Qualquer outra conduta que possa ser considerada inadequada em um ambiente profissional de forma razo\u00e1vel.</li> </ul>"},{"location":"USUARIOS/C%C3%B3digo_De_Conduta/CODE-OF-CONDUCT/#responsabilidades","title":"Responsabilidades","text":"<p>Os mantenedores do projeto possuem a responsabilidade de esclarecer os padr\u00f5es de comportamento e tomar medidas corretivas, adequadas e justas em resposta a qualquer comportamento inaceit\u00e1vel.</p> <p>Al\u00e9m disso, os mantenedores do projeto t\u00eam o direito e a responsabilidade de remover, editar ou rejeitar coment\u00e1rios, confirma\u00e7\u00f5es, c\u00f3digo, edi\u00e7\u00f5es de wiki, problemas e outras contribui\u00e7\u00f5es que n\u00e3o estejam em conformidade com este C\u00f3digo de Conduta. Eles tamb\u00e9m t\u00eam a autoridade para aplicar san\u00e7\u00f5es, tempor\u00e1rias ou permanentes, como banir qualquer colaborador que apresente comportamentos inadequados, amea\u00e7adores, ofensivos ou prejudiciais.</p>"},{"location":"USUARIOS/Prioriza%C3%A7%C3%A3o/Prioriza%C3%A7%C3%A3o%20Orientada%20a%20Neg%C3%B3cios/","title":"Prioriza\u00e7\u00e3o Orientada a Neg\u00f3cios de D\u00edvidas T\u00e9cnicas","text":""},{"location":"USUARIOS/Prioriza%C3%A7%C3%A3o/Prioriza%C3%A7%C3%A3o%20Orientada%20a%20Neg%C3%B3cios/#technical-debt-o-que-e","title":"Technical Debt, o que \u00e9?","text":"<p>Technical Debt, ou D\u00edvidas t\u00e9cnicas, referem-se a decis\u00f5es ou a\u00e7\u00f5es tomadas durante o desenvolvimento de um software que resultam em solu\u00e7\u00f5es de curto prazo, por\u00e9m menos ideais em termos de qualidade t\u00e9cnica. Essas decis\u00f5es podem envolver o uso de c\u00f3digo desorganizado, solu\u00e7\u00f5es de contorno r\u00e1pidas, falta de testes adequados ou outros compromissos que possam afetar a efici\u00eancia, a manutenibilidade e a escalabilidade do sistema.</p> <p>Essas d\u00edvidas t\u00e9cnicas s\u00e3o compar\u00e1veis a empr\u00e9stimos, onde a entrega inicial \u00e9 acelerada em detrimento da qualidade t\u00e9cnica. Assim como uma d\u00edvida financeira, as d\u00edvidas t\u00e9cnicas precisam ser pagas em algum momento. Caso contr\u00e1rio, elas podem se acumular e afetar negativamente o desenvolvimento futuro, tornando-o mais lento, propenso a erros e dif\u00edcil de manter.</p> <p>A d\u00edvida t\u00e9cnica \u00e9 identificada por um nome e descri\u00e7\u00e3o, al\u00e9m de possuir uma prioridade t\u00e9cnica e um risco associado (probabilidade de impactar \u00e1reas do sistema). \u00c9 importante diferenciar a d\u00edvida t\u00e9cnica de um incidente. Um incidente \u00e9 um evento que j\u00e1 est\u00e1 ocorrendo, como um bug que est\u00e1 causando problemas no sistema, resultando em indisponibilidade ou funcionalidades inativas. Embora um incidente n\u00e3o seja uma d\u00edvida t\u00e9cnica em si, pode ser originado por uma d\u00edvida t\u00e9cnica existente. Al\u00e9m disso, um incidente pode dar origem a uma nova d\u00edvida t\u00e9cnica.</p>"},{"location":"USUARIOS/Prioriza%C3%A7%C3%A3o/Prioriza%C3%A7%C3%A3o%20Orientada%20a%20Neg%C3%B3cios/#componentes","title":"Componentes:","text":"<p>Tamb\u00e9m  conhecidos como itens de configura\u00e7\u00e3o. Um componente pode ser um m\u00f3dulo do sistema ou um artefato, como um banco de dados, servi\u00e7o ou aplica\u00e7\u00e3o. Tudo o que \u00e9 t\u00e9cnico \u00e9 considerado um componente. Os componentes possuem tr\u00eas atributos: operational (em opera\u00e7\u00e3o), to-be operational (em desenvolvimento/planejamento) e legacy (legado). Com base nisso, conclu\u00edmos que uma d\u00edvida t\u00e9cnica presente em um componente afeta uma funcionalidade espec\u00edfica.</p> <p>\u00c9 importante ressaltar que: se um componente \u00e9 descontinuado, a d\u00edvida t\u00e9cnica associada a ele \u00e9 eliminada.</p>"},{"location":"USUARIOS/Prioriza%C3%A7%C3%A3o/Prioriza%C3%A7%C3%A3o%20Orientada%20a%20Neg%C3%B3cios/#produto-e-funcionalidades","title":"Produto e Funcionalidades:","text":"<p>A compreens\u00e3o desses conceitos tamb\u00e9m envolve os usu\u00e1rios. O sistema (no caso, o e-commerce) pode ser considerado um produto, tamb\u00e9m conhecido como It Asset. O produto possui v\u00e1rias funcionalidades, cada uma com duas propriedades: Core-business ou No-Core. Em geral, o Core-business refere-se \u00e0s funcionalidades essenciais que definem o produto, ou seja, s\u00e3o suas principais caracter\u00edsticas. J\u00e1 o No-Core se refere a funcionalidades que fazem parte do produto, mas est\u00e3o fora do fluxo principal. Mesmo sem essas funcionalidades, o produto ainda pode ser utilizado. Outro atributo \u00e9 a usage, que indica o quanto uma funcionalidade \u00e9 utilizada. Funcionalidades com alta utiliza\u00e7\u00e3o s\u00e3o classificadas como high, enquanto aquelas com menor utiliza\u00e7\u00e3o s\u00e3o classificadas como low.</p>"},{"location":"USUARIOS/Prioriza%C3%A7%C3%A3o/Prioriza%C3%A7%C3%A3o%20Orientada%20a%20Neg%C3%B3cios/#priorizacao-orientada-a-negocios","title":"Prioriza\u00e7\u00e3o Orientada a Neg\u00f3cios:","text":"<p>Compreendendo esses conceitos, podemos estabelecer uma pol\u00edtica de prioriza\u00e7\u00e3o para a Tracy-TD. Essa pol\u00edtica leva em considera\u00e7\u00e3o os valores, a utiliza\u00e7\u00e3o e o estado da funcionalidade. Vamos utilizar um exemplo para ilustrar melhor: uma d\u00edvida t\u00e9cnica que possui o value Core-Business (uma funcionalidade essencial para o fluxo principal do produto), uma usage High (alta taxa de utiliza\u00e7\u00e3o) e est\u00e1 no estado operational (em opera\u00e7\u00e3o/produ\u00e7\u00e3o). Essa d\u00edvida t\u00e9cnica receberia a prioridade mais alta, classificada como 1. Da mesma forma, outras d\u00edvidas t\u00e9cnicas seriam classificadas com valores de 1 a 10, levando em conta seus atributos. \u00c9 importante ressaltar que a classifica\u00e7\u00e3o dos valores \u00e9 definida pelas empresas e esse \u00e9 apenas um exemplo para facilitar o entendimento.</p>"},{"location":"USUARIOS/Prioriza%C3%A7%C3%A3o/Prioriza%C3%A7%C3%A3o%20Orientada%20a%20Neg%C3%B3cios/#entendendo-conceitos","title":"Entendendo Conceitos:","text":"<ul> <li> <p>Features (fonte de valor) / Funcionalidades: S\u00e3o as diferentes partes do sistema que agregam valor aos usu\u00e1rios.</p> </li> <li> <p>Business Value: Representa o valor que uma funcionalidade agrega ao neg\u00f3cio.</p> </li> <li> <p>Core-Business: Refere-se \u00e0s funcionalidades essenciais do sistema, aquelas que fazem parte do fluxo principal do produto.</p> </li> <li> <p>No-Core-Business: S\u00e3o funcionalidades que est\u00e3o fora do fluxo principal, mas ainda fazem parte do produto.</p> </li> <li> <p>Usage: Indica o n\u00edvel de utiliza\u00e7\u00e3o de uma funcionalidade pelos usu\u00e1rios. Pode ser classificado como high (alto) ou low (baixo), dependendo da taxa de utiliza\u00e7\u00e3o.</p> </li> <li> <p>Value: Representa o valor atribu\u00eddo a uma funcionalidade com base em crit\u00e9rios como Business Value, Core-Business, No-Core-Business e Usage.</p> </li> <li> <p>Operational (Est\u00e1 em opera\u00e7\u00e3o/em produ\u00e7\u00e3o): Refere-se ao estado de uma funcionalidade que est\u00e1 ativa e em pleno funcionamento.</p> </li> <li> <p>To-be operational (Est\u00e1 sendo desenvolvido/em planejamento): Indica que uma funcionalidade est\u00e1 em processo de desenvolvimento ou em fase de planejamento.</p> </li> <li> <p>Legacy (Sistema Legado): Refere-se a um sistema que j\u00e1 possui uma data definida para ser desativado, geralmente substitu\u00eddo por uma nova vers\u00e3o ou tecnologia.</p> </li> </ul>"}]}